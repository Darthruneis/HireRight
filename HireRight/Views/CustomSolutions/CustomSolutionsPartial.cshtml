@using HireRight.EntityFramework.CodeFirst.Models.CompanyAggregate
@model CustomSolutionsSecondStepModel
<script src="~/Scripts/showHideDiv.js"></script>
<script src="~/Scripts/CustomSolutions/customSolutionsPartial.js"></script>
<div class="row">
    <div class="col-xs-12">
        <ol>
            <li>Select the Industry for your organization if listed. You may also select the General industry to see the categories that apply to many industries.</li>
            <li>For each scale rate the importance for a successful candidate. At the end of this first step, all 'Irrelevant' categories will be dropped. When you have eliminated categories you are uninterested in, use the 'Continue' button.</li>
            <li>Finally, narrow the selection down to at most nine (9) categories for your industry, and up to nine (9) additional General categories. You may move back and forth between this and the last step at any time using the 'Back' and 'Continue' buttons.</li>
            <li>When finished, click 'Finish'.</li>
        </ol>
        @{
            var candidness = Model.Categories.SingleOrDefault(x => x.Title == "Candidness");
        }
        @if (candidness != null)
        {
            <span>All tests will include a 10th category - <a id="candidnessLink" onclick="$('#candidnessDescription').toggle();">@(candidness.Title)</a>.</span>
            <br />
            <div id="candidnessDescription" style="display: none; margin-left: 5%;">@(candidness.Description)</div>
        }
    </div>
</div>
<div id="industryTogglesRow">
    <div class="pad-top-5">
        <div style="clear: both;">
            @{ var general = @Model.Industries.Single(x => x.Id == Industry.General);}
            <div class="industryToggle generalIndustryToggle" data-industryid="@Industry.General" data-industryname="@general.Name">
                <span style="text-align: center; display: inline-block;">
                    <i class="glyphicon glyphicon-ok" style="display: none; color: green;"></i>
                    &nbsp;&nbsp;@general.Name
                </span>
            </div>
            @foreach (IndustryDTO industry in Model.Industries.Where(x => x.Id != Industry.General))
            {
                <div class="industryToggle" data-industryid="@industry.Id" data-industryname="@industry.Name">
                    <span style="text-align: center; display: inline-block;">
                        <i class="glyphicon glyphicon-ok" style="display: none; color: green;"></i>
                        &nbsp;&nbsp;@industry.Name
                    </span>
                </div>
            }
        </div>
    </div>
    <div class="row importanceHeaders">
        <h4 class="col-xs-4">Irrelevant</h4>
        <h4 class="col-xs-4">Nice to Have</h4>
        <h4 class="col-xs-4">Critical for Success</h4>
    </div>
</div>

<div id="categoryContainerDiv">
    @for (int i = 0; i < Model.Categories.Count(); i++)
    {
        var category = Model.Categories[i];
        @Html.HiddenFor(x => x.Categories[i].Id)

        <div class="row categoryCardRow">
            <div class="col-xs-4 categoryColumn lowestCategory">
                @if (category.Importance == CategoryImportance.Irrelevant)
                {
                    @Html.Partial("_CategoryCard", category)
                }
            </div>
            <div class="col-xs-4 categoryColumn">
                @if (category.Importance == CategoryImportance.LowImportance)
                {
                    @Html.Partial("_CategoryCard", category)
                }
            </div>
            <div class="col-xs-4 categoryColumn">
                @if (category.Importance == CategoryImportance.HighImportance)
                {
                    @Html.Partial("_CategoryCard", category)
                }
            </div>
            @*This needs to remain the only hidden field that is inside of the 'categoryCardRow' element.*@
            @Html.HiddenFor(x => x.Categories[i].Importance)
        </div>
    }
</div>
<script src="~/Scripts/CustomSolutions/_customSolutions.js"></script>
<script src="~/Scripts/stickyFill.js"></script>
<script>
    $(document).ready(function () {
        CustomSolutions.bindEvents();
        var togglesRow = document.getElementById("industryTogglesRow");
        Stickyfill.addOne(togglesRow);
    });
</script>